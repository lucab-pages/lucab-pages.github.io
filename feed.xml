<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Luca Bruno</title>
    <description>Luca Bruno - Personal pages</description>
    <link>https://www.lucabruno.net/</link>
    <atom:link href="https://www.lucabruno.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 26 Dec 2019 18:29:17 +0000</pubDate>
    <lastBuildDate>Thu, 26 Dec 2019 18:29:17 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>nRF52 debug access port protection</title>
        <description>&lt;p&gt;Nordic produces a multitude of ARM System-on-Chip (SoC) products. Among those, &lt;a href=&quot;https://infocenter.nordicsemi.com/topic/struct_nrf52/struct/nrf52.html&quot;&gt;nRF52&lt;/a&gt; is a popular ARMv7 chip with Bluetooth 5 support, running at 64 MHz.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/img/nRF52840-dongle.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;debugging-with-openocd&quot;&gt;Debugging with OpenOCD&lt;/h2&gt; &lt;p&gt;For this chip, &lt;a href=&quot;http://openocd.org/&quot;&gt;OpenOCD&lt;/a&gt; offers support for basic debugging features (&lt;code class=&quot;highlighter-rouge&quot;&gt;nrf52.cpu&lt;/code&gt; commands), flash manipulation (&lt;code class=&quot;highlighter-rouge&quot;&gt;nrf5&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;flash&lt;/code&gt; commands), and advanced debugging via the Debug Access Port (&lt;code class=&quot;highlighter-rouge&quot;&gt;nrf52.dap&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Upon starting a debugging session via OpenOCD, it will be identified as such:&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ openocd -f interface/cmsis-dap.cfg -f target/nrf52.cfg [...] nrf52.cpu: hardware has 6 breakpoints, 4 watchpoints target halted due to debug-request, current...</description>
        <pubDate>Thu, 26 Dec 2019 17:01:07 +0000</pubDate>
        <link>https://www.lucabruno.net/posts/2019-12-26/nrf52-ap-protection</link>
        <guid isPermaLink="true">https://www.lucabruno.net/posts/2019-12-26/nrf52-ap-protection</guid>
        
        <category>openocd</category>
        
        <category>nrf52</category>
        
        
      </item>
    
      <item>
        <title>fxe-rs: binary execution across Linux mount-namespaces</title>
        <description>&lt;p&gt;This short post briefly describes a useful trick to execute binaries across different mount-namespaces. It consists of a neat technique involving &lt;code class=&quot;highlighter-rouge&quot;&gt;setns(2)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fexecve(3)&lt;/code&gt;.&lt;/p&gt; &lt;h2 id=&quot;fxe-rs&quot;&gt;fxe-rs&lt;/h2&gt; &lt;p&gt;A demo repository to illustrate this trick is available at &lt;a href=&quot;https://github.com/lucab/fxe-rs&quot;&gt;fxe-rs&lt;/a&gt;. It just contains &lt;code class=&quot;highlighter-rouge&quot;&gt;fxe&lt;/code&gt;: a small, pure-&lt;a href=&quot;https://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt; program which is able to execute Linux binaries across mount-namespaces.&lt;/p&gt; &lt;p&gt;As an example, letâ€™s take a &lt;code class=&quot;highlighter-rouge&quot;&gt;busybox&lt;/code&gt; container and pretend we want to run &lt;code class=&quot;highlighter-rouge&quot;&gt;modinfo crc16&lt;/code&gt; to inspect the details of that specific kernel module. This typically requires asking the container runtime to bind-mount all relevant directories beforehand:&lt;/p&gt; &lt;div...</description>
        <pubDate>Sun, 13 Aug 2017 20:53:42 +0000</pubDate>
        <link>https://www.lucabruno.net/posts/2017-08-13/fxe-rs</link>
        <guid isPermaLink="true">https://www.lucabruno.net/posts/2017-08-13/fxe-rs</guid>
        
        <category>namespaces</category>
        
        <category>rust</category>
        
        
      </item>
    
      <item>
        <title>Static hosting: jekyll, forestry, github and cloudflare</title>
        <description>&lt;p&gt;This post contains a quick summary describing how this website is actually made.&lt;/p&gt; &lt;h2 id=&quot;static-hosting&quot;&gt;Static hosting&lt;/h2&gt; &lt;p&gt;The whole website is purely made of static assets. It is versioned via &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;. Hosting of static pages is provided by &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h2&gt; &lt;p&gt;The software running under the hood is &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll.&lt;/a&gt; It allows to quickly build static websites starting from plaintext &lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt; files.&lt;/p&gt; &lt;h2 id=&quot;forestry&quot;&gt;Forestry&lt;/h2&gt; &lt;p&gt;From time to time I enjoy using a CMS and writing contents directly from the browser. &lt;a href=&quot;https://forestry.io/&quot;&gt;Forestry&lt;/a&gt; fits perfectly in the above flow, as it directly supports Jekyll and git.&lt;/p&gt; &lt;h2 id=&quot;cloudflare&quot;&gt;Cloudflare&lt;/h2&gt;...</description>
        <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://www.lucabruno.net/posts/2017-01-01/static-hosting</link>
        <guid isPermaLink="true">https://www.lucabruno.net/posts/2017-01-01/static-hosting</guid>
        
        <category>github</category>
        
        
      </item>
    
  </channel>
</rss>
